'''                                          Условие
С помощью наследования можно как бы "наполнять" дочерние классы нужными качествами (свойствами). Как пример, объявите в
программе класс с именем:

Singleton

который бы позволял создавать только один экземпляр (все последующие экземпляры должны ссылаться на первый). Как это
делать, вы должны уже знать из этого курса.

Затем, объявите еще один класс с именем:

Game

который бы наследовался от класса Singleton. Объекты класса Game должны создаваться командой:

game = Game(name)
где name - название игры (строка). В каждом объекте класса Game должен создаваться атрибут name с соответствующим
содержимым.

Убедитесь, что атрибут name принимает значение первого созданного объекта (если это не так, то поправьте инициализатор
дочернего класса, чтобы это условие выполнялось).
'''


class Singleton:
    __instance = None                                     # ссылка для экземпляра дочернего класса
    __instance_base = None                                # ссылка для экземпляра родительского класса
    def __new__(cls, *args, **kwargs):
        if cls == Singleton:                              # если создаем экз-р класса Singleton
            if cls.__instance_base is None:
                cls.__instance_base = object.__new__(cls)
            return cls.__instance_base

        if cls.__instance is None:                         # если создаем экз-р дочернего класса
            cls.__instance = super().__new__(cls)
        return cls.__instance

    def __del__(self):
        Singleton.__instance = None


class Game(Singleton):
    def __init__(self, name: str):
        if 'name' not in self.__dict__:                 # если экз-р существует, нельзя изменить значение атрибута name
            self.name = name




